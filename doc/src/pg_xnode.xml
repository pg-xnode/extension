<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://docbook.org/xml/4.2/docbookx.dtd">
<article>
 <title><productname>pg_xnode</productname> - user documentation</title>
 <sect1>
  <title>
   Introduction
  </title>
  <para>
   <productname>pg_xnode</productname> is PostgreSQL extension. The purpose is to
   <itemizedlist>
    <listitem>
     <para>
     provide the PostgreSQL database server with ability to query and modify XML documents
     in an efficient and convenient way.
     </para>
    </listitem>
    <listitem>
     <para>
     introduce a set of data types to represent XML document (DOM) tree, its parts (nodes,
     subtrees) and XPath expressions.
     </para>    
    </listitem>
    <listitem>
     <para>
     provide an extensible platform for non-traditional approaches to XML storage and processing.
     </para>
    </listitem>
   </itemizedlist>
   <productname>pg_xnode</productname> doesn't rely on any third-party library.
  </para>
  <caution>
   <para>
    The current version is not ready for use in production environments. The extension may be
    subject to significant changes, including those of the binary data format. Migration from
    versions lower than <productnumber>1.0</productnumber> won't be supported.
   </para>
   <para>
    In addition, comprehensive testing has to be performed before <productnumber>1.0</productnumber>
    gets released.
   </para>
  </caution>
 </sect1>
 
 <sect1>
  <title>Installation</title>
  <para>
   Make sure <productname>PostgreSQL</productname> database server is installed
   (the current version of <productname>pg_xnode</productname> has been developed on top of
   <productname>PostgreSQL</productname> <productnumber>9.1</productnumber>).
   <orderedlist>
    <listitem>
     <para>
      Extract the archive.
     </para>
    </listitem>
   	<listitem>
   	 <para>
   	  <userinput>make</userinput>
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  <userinput>sudo make install</userinput>
   	  <footnote>
   	   <para>
   	    If <firstterm>PATH</firstterm> environment variable doesn't seem to contain
   	  	<productname>pg_xnode</productname>, specify the full path, e.g.
   	    <userinput>sudo env PG_CONFIG=/usr/local/pgsql/bin/pg_config make install</userinput>
   	   </para>
   	  </footnote>
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  Start the PostgreSQL cluster.
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  Optional verification:
<screen>
<userinput>make installcheck</userinput>
</screen>
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  Connect to your database.
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  <userinput>CREATE EXTENSION xnode;</userinput>
   	  <footnote>
   	   <para>
   	    If earlier version already exists where version number &lt;=1.0, then the extension
   	    must be dropped (with <literal>CASCADE</literal> option) and re-created.
   	    If the <literal>CREATE</literal> command step is skipped in such a case instead, then
   	    data in obsolete format remain in the database and <productname>pg_node</productname>'s
   	    behaviour becomes undefined.   
   	   </para>
   	   <para>
   	   	This only applies to pre-releases. Migration functionality will be delivered
   	   	for versions &gt; 1.0;  
   	   </para>
   	  </footnote>
   	 </para>
   	</listitem>
   </orderedlist>
  </para>
 </sect1>
 
 <sect1>
  <title>Data types</title>
  <para>
   <productname>pg_xnode</productname> defines data types to store various XML-related objects
   in binary form. This helps to avoid (repeated) unnecessary parsing and serialization of
   those objects and thus provides potential for efficient data processing.
  </para>
  
  <sect2 id="types_node">
   <title><literal>xml.node</literal></title>
   <para>
    <literal>node</literal> type represents a node of XML document tree.
    Following are the valid node kinds: <firstterm>document</firstterm>,
    <firstterm>document type declaration (DTD)</firstterm>, <firstterm>element</firstterm>,
    <firstterm>attribute</firstterm>, <firstterm>comment</firstterm>,
    <firstterm>character data (CDATA)</firstterm>, <firstterm>processing instruction (PI)</firstterm>
    and <firstterm>text node</firstterm>.
   </para>
   <para>
    Special node type <firstterm>document fragment</firstterm> exists to represent
    a set of nodes. To add document fragment to some location in the tree in fact means to add its children.
    The document fragment node is actually just a kind of node container.
   </para>
   <para>
    Example:
    <programlisting>
CREATE TABLE nodes (
        data    xml.node
);

INSERT INTO nodes
VALUES ('&lt;element/&gt;'), ('&lt;!--comment--&gt;'), ('plain text'), ('&lt;a/&gt;&lt;b/&gt;');

SELECT *
FROM nodes;
    </programlisting>
    <screen>
          data      
----------------
 &lt;element/&gt;
 &lt;!--comment--&gt;
 plain text
 &lt;a/&gt;&lt;b/&gt;
(4 rows)
    </screen>
   </para>
  </sect2>
  
  <sect2 id="types_doc">
   <title><literal>xml.doc</literal></title>
   <para>
    <literal>doc</literal> represents well-formed XML document.
    <footnote>
     <para>
      Unlike other node kinds (comment, element, etc.) there's no polymorphism between
      <literal>xml.node</literal> and <literal>xml.doc</literal>. That is, functions do not
      consider <literal>xml.doc</literal> a special case of <literal>xml.node</literal>. However
      an implicit <literal>xml.node:xml.doc</literal> cast exists for cases where conversion to 
      a well-formed XML document does make sense.  
     </para>
    </footnote>
   </para>
   <para>
    If namespace prefixes are used, each must be bound, i.e. each namespace used must be declared
    at the appropriate level of the document tree. This restriction does not apply to
    <literal>xml.node</literal> type.
   </para>
   <para>
    Example:
    <programlisting>
CREATE TABLE ecosystems (
	id	int,
	data	xml.doc
);
     
INSERT INTO ecosystems VALUES (1,
	'&lt;zoo city="Wien"&gt;&lt;penguin name="Pingu"/&gt;&lt;elephant name="Sandeep"/&gt;&lt;/zoo&gt;');
	
INSERT INTO ecosystems VALUES (2,
	'&lt;africa&gt;&lt;hipo weight="2584"/&gt;&lt;elephant age="28"/&gt;&lt;/africa&gt;');

INSERT INTO ecosystems VALUES (3,
	'&lt;zoo city="Dublin"&gt;&lt;rhino/&gt;&lt;giraffe/&gt;&lt;elephant name="Yasmin"/&gt;&lt;/zoo&gt;');
    </programlisting>
   </para>
  </sect2>
  
  <sect2 id="types_pathval">
   <title><literal>xml.pathval</literal></title>
   <para>
    <literal>pathval</literal> represents a result of <literal>xml.path()</literal> functions
    (see bellow). Depending on particular XPath expression, the resulting <literal>pathval</literal> value
    contains binary value of the appropriate XPath data type: number, string, boolean,
    <link linkend="types_node"><literal>node</literal></link>.
   </para>
  </sect2>
 
  <sect2 id="types_template">
   <title><literal>xml.xnt</literal></title>
   <para>
    <literal>xnt</literal> stands for <link linkend="chapter_template"><firstterm>XML Node Template (XNT)</firstterm></link>.
    Such a template may be undersotood as incomplete <link linkend="types_node"><literal>node</literal></link>.
    Instead of nodes, it contains <firstterm>parameters</firstterm> at some locations of the tree.
   </para>
   <para>
    The template gets converted to <link linkend="types_node"><literal>node</literal></link> when valid
    <link linkend="types_pathval"><literal>pathval</literal></link> values are substituted for all parameters.
    <link linkend="functions_node"><literal>xml.node(xnt, text[], record)</literal></link> is the function
    to perform the substitution.
   </para>
   <para>
    See <xref linkend="chapter_template"/> for more information and some examples.
   </para>
  </sect2> 
 </sect1>

 <sect1>
  <title>Functions</title>     
  <sect2>
   <title><literal>xml.node_kind()</literal></title>
<synopsis>
xml.node_kind(xml.node node) returns text
</synopsis>
   <para>
    Returns textual expression for the kind of <literal>node</literal>, e.g. element, comment, etc.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.node_kind(data)
FROM nodes;   
    </programlisting>
    <screen>
           node_kind        
------------------------
 XML element
 XML comment
 text node
 document fragment
(4 rows)
    </screen>
   </para>
  </sect2>
  
  <sect2>
   <title><literal>xml.element()</literal></title>
<synopsis>
xml.element(text name, text[][2] attributes, xml.node nested) returns xml.node
</synopsis>
   <para>
    Returns XML element having name equal to <literal>name</literal> and attributes listed in
    <literal>attributes</literal> array: one row per attribute where the first column is attribute
    name and the second column is the attribute value. <literal>nested</literal> parameter may contain
    other node(s) to be nested in the new XML element.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.element('city', '{{"name", "Tokyo"}, {"population", 13185502}}', NULL);
	</programlisting>
	<screen>
                  element                   
--------------------------------------------
 &lt;city name="Tokyo" population="13185502"/&gt;
 (1 row)
 	</screen>
   </para>
   
   <para>
    Example:
    <programlisting>
SELECT xml.element('book', NULL, xml.element('chapter', '{{"id", 1}}', 'some text'));
	</programlisting>
	<screen> 
                      element                      
--------------------------------------------------
 &lt;book&gt;&lt;chapter id="1"&gt;some text&lt;/chapter&gt;&lt;/book&gt;
(1 row)
 	</screen>
   </para>
  </sect2>
   
  <sect2>
   <title><literal>xml.children()</literal></title>
<synopsis>
xml.children(xml.node node) returns xml.node[]
</synopsis>
   <para>
    Returns array of <literal>node</literal>&apos;s child nodes or empty array if <literal>node</literal>
    is a leaf node.
   </para>
   <para>
    Only node at the immediate lower level of the tree is considered a child.
    Recursive calls of the function on results has to be used to get nested nodes from the deeper levels
    (i.e. <firstterm>descendants</firstterm>). 
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.children(&apos;&lt;house&gt;&lt;cellar&gt;&lt;wine/&gt;&lt;/cellar&gt;&lt;floor/&gt;&lt;garret/&gt;&lt;/house&gt;&apos;);
                   children                    
-----------------------------------------------
 {&lt;cellar&gt;&lt;wine/&gt;&lt;/cellar&gt;,&lt;floor/&gt;,&lt;garret/&gt;}
(1 row)

    </programlisting>
   </para>
  </sect2>
  <sect2>
   <title><literal>xml.path()</literal> - scalar</title>
<synopsis>
xml.path(xml.path xpath, xml.doc document) returns xml.pathval
</synopsis>
   <para>
    Returns result of XPath expression (passed as <literal>xpath</literal>)
    applied to <literal>document</literal>.
    If <literal>xpath</literal> is a location path and there are multiple qualifying nodes
    in the document then the returned<function>xml.pathval</function> contains a document fragment
    containing all the qualifying nodes.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.path('//elephant', e.data)
FROM ecosystems e;
    </programlisting>
    <screen>
         elephants          
----------------------------
 &lt;elephant name="Sandeep"/&gt;
 &lt;elephant age="28"/&gt;
 &lt;elephant name="Yasmin"/&gt;
(3 rows)
    </screen>
   </para>
  </sect2>
   
  <sect2>
   <title><literal>xml.path()</literal> - vector</title>
<synopsis>
xml.path(xml.path basePath, xml.path[] columnPaths, xml.doc doc) returns xml.pathval[]
</synopsis>
   <para>
    Returns table-like output. For each occurrence of <literal>basePath</literal> in
    <literal>doc</literal> an array of <literal>xml.pathval</literal> values is returned
    where n-th element is value of relative XPath expression passed as n-th element of
    <literal>columnPaths</literal>. All values of <literal>columnPaths</literal> array
    are relative to <literal>basePath</literal>.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.path('/zoo',
	'{"@city", "count(elephant)", "count(penguin)"}', e.data) as counts
FROM ecosystems e;
    </programlisting>
    <screen>
           counts           
----------------------------
 {Wien,1.000000,1.000000}
 {Dublin,1.000000,0.000000}
(2 rows)
    </screen>
   </para>
  </sect2>
 
  <sect2>
   <title><literal>xml.add()</literal></title>
<synopsis>
xml.add(xml.doc doc, xml.path path, xml.node newNode, xml.add_mode mode) returns xml.doc
</synopsis>
   <para>
    Adds <literal>newNode</literal> to all occurrences of <literal>path</literal> in
    <literal>doc</literal>. Depending on <literal>mode</literal> value, the new node can
    be added before (<literal>b</literal>) or after (<literal>a</literal>) the <firstterm>target node</firstterm>
    (where target node is the the node <literal>path</literal> points at).
   </para>
   <para>
    If target node kind is element and  <literal>mode</literal> is <literal>i</literal>, then
    the new node is added into that element. If that element is not empty, the new node is added
    as the last.
   </para>
   <para>
    If <literal>mode</literal> is <literal>r</literal> then the target node is replaced with
    <literal>newNode</literal>.
   </para>
   <para>
    A document is returned where all the additions have been done as required
    in the input parameters.
   </para>
   <para>
    Example:
    <programlisting>
UPDATE ecosystems e
SET data=xml.add(e.data, '/africa', '&lt;gorilla/&gt;', 'i')
where e.id=2;

SELECT data FROM ecosystems e where e.id=2;
    </programlisting>
    <screen>
                                     data                                     
------------------------------------------------------------------------------
 &lt;africa&gt;&lt;hipo weight="2584"/&gt;&lt;elephant age="28"/&gt;&lt;gorilla/&gt;&lt;/africa&gt;
(1 row)
    </screen>
   </para>
  </sect2>
 
  <sect2>
   <title><literal>xml.remove()</literal></title>
<synopsis>
xml.remove(xml.doc doc, xml.path path) returns xml.doc
</synopsis>
   <para>
    Removes all occurrences of <literal>path</literal> from <literal>doc</literal>.
   </para>
   <para>
    A document is returned where all the removals have been done as required
    in the input parameters.
   </para>
   <para>
    Example:
    <programlisting>
UPDATE ecosystems e
SET data=xml.remove(e.data, '/zoo/elephant')
WHERE xml.path('/zoo', data);

SELECT xml.path('count(/zoo/elephant)', data)
FROM ecosystems e
WHERE xml.path('/zoo', data);
    </programlisting>
    <screen>
   path   
----------
 0
 0
(2 rows)

    </screen>
   </para>
  </sect2>
 
  <sect2 id="functions_fragment">
   <title><literal>xml.fragment()</literal> - aggregate</title>
<synopsis>
xml.fragment(node) returns xml.node
</synopsis>
   <para>
    Aggregate function to turn group of nodes into a single node - a document fragment.
    (What document fragment means is explained in <xref linkend="types_node"/>.)
    The function can be combined with <link linkend="chapter_template">XNT templates</link>,
    to turn relational data into XML. See <xref linkend="template_example_agg"/> for an example. 
   </para>
  </sect2>
 
  <sect2 id="functions_node">
   <title><literal>xml.node()</literal></title>
<synopsis>
xml.node(xml.xnt template, text[] paramNames, record paramValues)
returns xml.node
</synopsis>
   <para>
	Constructs a new <link linkend="types_node"><literal>node</literal></link> out of
	<link linkend="types_template"><literal>template</literal></link> by substituting parameters.
   </para>
   <para>
    <literal>paramNames</literal> is an array of all parameter names that the template contains, while
    <literal>paramValues</literal> is a row containing the corresponding values.
    Ordering is crucial to associate values and parameters correctly. For example, the first column in
    <literal>paramValues</literal> is understood to be the value of the parameter whose name is the first
    item of <literal>paramNames</literal> array.
   </para>
   <para>
   	Each parameter value is cast to the most suitable XPath data type. For example <literal>varchar</literal>
   	SQL type is converted to <literal>string</literal> XPath type, <literal>integer</literal> SQL type is
   	converted to <literal>number</literal> XPath type, etc.
   </para>
   <para>
    See <xref linkend="chapter_template"/> for examples.
   </para>
  </sect2>
 
  <sect2>
   <title><literal>xml.node_debug_print()</literal></title>
<synopsis>
xml.node_debug_print(xml.node node) returns text
</synopsis>
   <para>
    Shows tree structure of <literal>node</literal> tree. Instead of content, position
    (offset) of each node in the binary value is displayed, as well as its size. 
   </para>
  </sect2>
  
  <sect2>
   <title><literal>xml.path_debug_print()</literal></title>
<synopsis>
xml.path_debug_print(xml.path xpath) returns text
</synopsis>
   <para>
    Returns text string showing structure of XPath expression passed as <literal>xpath</literal>. 
   </para>
  </sect2>
 </sect1>
 
 <sect1 id="chapter_template">
  <title>XML Node Template (XNT)</title>
  <para>
   XML Node Template (XNT) is a means to turn a table row (i.e. instance of <literal>record</literal> PostgreSQL
   type) into a node of XML document tree (i.e. instance of <link linkend="types_node"><literal>node</literal></link>).
   If acompanied with <link linkend="functions_fragment"><literal>fragment()</literal></link> function, the template
   can be used to create a single XML node or document out of many table rows.
  </para>
  <para>
   The XNT syntax and its tags strongly resemble template (stylesheet) for
   <ulink url="http://http://www.w3.org/TR/xslt">XSL Transformations</ulink>, however there is one
   fundamental difference: there's no <literal>select</literal> attribute in XNT.
   The reason is that XNT processing function
   (i.e. <link linkend="functions_node"><literal>node()</literal></link>) does not receive
   any input XML document to browse in and to modify (by applying various templates).
   The only thing the XNT processing function does is to substitute particular values for the
   template parameters. Another significant difference is that XSLT template may define many
   templates, whereas XNT template only has one - located in the root of the tree.
  </para>
  
  <sect2 id="template_expressions">
   <title>Expressions and Parameters</title>
   <para>
    XNT template uses (XPath) expressions in the same way as XSLT template does. There's however difference
    in the expression itself: XNT template does not accept location paths, whether
    absolute or relative. The reason is that - as mentioned above - there's no source XML
    document the location path could reference. 
   </para>
   
   <para>
    Besides string or numeric literals, expression can contain parameters. Parameter starts with
    dollar sign and its usage is identical to that in XSLT templates. 
   </para>
   
   <para>
    Examples of expressions accepted by XNT:
    <programlisting>
2 * $pi * $r
count($nodes)
contains($sentence, $word)
    </programlisting>
    Expressions NOT accepted by XNT:
    <programlisting>
contains(/article/sect1/title/text, $word)
name(/article/sect1/@id)
    </programlisting>
   </para>
   
   <para>
    Expression in XNT template also corresponds to XSLT in the way it's used
    to construct attribute value: it has to be enclosed in curly braces. For example:
    <programlisting>
&lt;ticket price="{$p}" destination="{$d}" departure="{$month}/{$day}/{$year}"/&gt;
    </programlisting>
   </para>
  </sect2>
  
  <sect2 id="template_tags">
   <title>XNT Tags</title>
   <para>
   Besides complete nodes or nodes where just attribute value is parametrized, the XNT template
   may contain some of the following special tags. As mentioned earlier in this chapter, 
   the XNT tags are in general similar to XSLT tags and sometimes even identical. However
   they never have <literal>select</literal> attribute to get XML node (node-set) from input
   XML document (because XNT does not know the concept of input XML document).
   Instead, if XNT tag needs an XML node to work with, it must always receive it as template
   parameter. 
   </para>
    <sect3>
     <title><literal>xnt:copy-of</literal></title>
     <para>
      This tag has a single attribute <literal>expr</literal>.
      <link linkend="template_expressions">XNT expression</link> is expected as the attribute value. 
     </para>
     <para>
      If the expression evaluates to boolean, number or string XPath type
      (see <xref linkend="types_pathval"/>), then the value is cast to string and a text node
      containing is substituted for the <literal>xnt:copy-of</literal> node.
      If the expresion evaluates to node, the resulting node itself is used for the substitution.
      (Special case is that document fragment is the result. In such a case only child nodes of
      the fragment node are inserted.)
     </para>
     <para>
      Example:
<programlisting>
<![CDATA[
select xml.node(
'<xnt:template xmlns:xnt="http://www.pg-xnode.org/xnt">
   <chapter>
     <xnt:copy-of expr="$paragraphs"/>
   </chapter>
</xnt:template>',
'{paragraphs}',
ROW('<para>Just a few words.</para><para>The end.</para>'::xml.node)
);
]]>
</programlisting>
<screen>
<![CDATA[
                                     node                                     
------------------------------------------------------------------------
 <chapter><para>Just a few words.</para><para>The end.</para></chapter>
(1 row)
]]>
</screen>
     </para>
    </sect3>
    
    <sect3 id="template_tags_element">
     <title><literal>xnt:element</literal> and <literal>xnt:attribute</literal></title>
     <para>
      <literal>xnt:element</literal> has a single attribute <literal>name</literal>. String
      (possibly containg string-returning expression(s)) is expected as the value. If the string
      represents a valid XML name, a new XML element having this name is substituted for the
      <literal>xnt:element</literal> node. 
     </para>

     <para>
      <literal>xnt:attribute</literal> has 2 attributes:  <literal>name</literal> and
      <literal>value</literal>. Both expect string value and these values are used as
      name and value of a new XML attribute respectively. (Similar to <literal>xnt:element</literal>,
      value of <literal>name</literal> must be a valid XML name.) The new XML attribute
      is substituted for the <literal>xnt:attribute</literal> tag.
     </para>
 
     <para>
      Example:
<programlisting>
TABLE trees;
</programlisting>
<screen>
  name   | height 
---------+--------
 sequoia |  115.5
 palm    |     60
 ash     |   99.6
(3 rows)
</screen>

<programlisting>
<![CDATA[
INSERT INTO trees_xml
select xml.node(
'<xnt:template xmlns:xnt="http://www.pg-xnode.org/xnt">
   <xnt:element name="{$name}">
     <xnt:attribute name="height" value="{$height}"/>
   </xnt:element>
</xnt:template>',
'{name, height}',
ROW(name, height))
FROM trees;
]]>

TABLE trees_xml;
</programlisting>
<screen>
<![CDATA[
                node                
---------------------------
 <sequoia height="115.5"/>
 <palm height="60"/>
 <ash height="99.6"/>
(3 rows)
]]>
</screen>
     </para>
    </sect3>
  </sect2>
  
  <sect2 id="template_example_agg">
   <title>Example: Aggregate Multiple Rows Into a Single XML Node</title>
   <para>
    The example in <xref linkend="template_tags_element"/> shows how to generate one
    XML node per table row. Sometimes it may be desired to create a single XML node
    out of multiple rows (and possibly cast it to XML document). This is the typical use case
    for <link linkend="functions_fragment"><literal>xml.fragment()</literal></link> function.
<programlisting>
<![CDATA[
SELECT xml.node(
'<xnt:template xmlns:xnt="http://www.pg-xnode.org/xnt">
   <forest>
     <xnt:copy-of expr="$trees"/>
   </forest>
</xnt:template>',
'{trees}',
ROW(xml.fragment(tree)))
FROM trees_xml;
]]>
</programlisting>
<screen>
<![CDATA[
                                                 node                                                  
-----------------------------------------------------------------------------------
 <forest><sequoia height="115.5"/><palm height="60"/><ash height="99.6"/></forest>
 ]]>
</screen>
   </para>
  </sect2>
 </sect1>
 
 <appendix id="release">
 <title>Release Notes</title>
  <sect1>
   <title>Release 0.6.0</title>
   <para>
    The first release to be published on www.pgxn.org
   </para>
  </sect1>

  <sect1>
   <title>Release 0.6.1</title>
   <itemizedlist>
    <listitem>
     <para>
      Added XPath core library functions <literal>true()</literal>, <literal>false()</literal>,
      <literal>last()</literal>, <literal>concat()</literal>, <literal>boolean()</literal>,
      <literal>number()</literal> and <literal>string()</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      Added DOM function <literal>xml.children()</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Added casts from <literal>xml.pathval</literal> to Postgres types.
     </para>
    </listitem>
    <listitem>
     <para>
      Fixed several bugs and eliminated some inefficiencies
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
  
  <sect1>
   <title>Release 0.7.0</title>
   <itemizedlist>
    <listitem>
     <para>
      Function <literal>xml.element()</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      XPath core library function <literal>starts-with()</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      XPath operators: <literal>|</literal>, <literal>+</literal>, <literal>-</literal>
      (both binary and unary), <literal>*</literal>, <literal>div</literal>, <literal>mod</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Bug fixes, refactoring, comments.
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
</appendix>
</article>
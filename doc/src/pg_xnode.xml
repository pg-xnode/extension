<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://docbook.org/xml/4.2/docbookx.dtd">
<article>
 <title><productname>pg_xnode</productname> - user documentation</title>
 <sect1>
  <title>
   Introduction
  </title>
  <para>
   <productname>pg_xnode</productname> is PostgreSQL extension. The purpose is to
   <itemizedlist>
    <listitem>
     <para>
     provide the PostgreSQL database server with ability to query and modify XML documents
     in an efficient and convenient way.
     </para>
    </listitem>
    <listitem>
     <para>
     introduce a set of data types to represent XML document (DOM) tree, its parts (nodes,
     subtrees) and XPath expressions.
     </para>    
    </listitem>
    <listitem>
     <para>
     provide an extensible platform for non-traditional approaches to XML storage and processing.
     </para>
    </listitem>
   </itemizedlist>
   <productname>pg_xnode</productname> doesn't rely on any third-party library.
  </para>
  <caution>
   <para>
    The current version is not ready for use in production environments. The extension may be
    subject to significant changes, including those of the binary data format. Migration from
    versions lower than <productnumber>1.0</productnumber> won't be supported.
   </para>
   <para>
    In addition, comprehensive testing has to be performed before <productnumber>1.0</productnumber>
    gets released.
   </para>
  </caution>
 </sect1>
 
 <sect1>
  <title>Installation</title>
  <para>
   Make sure <productname>PostgreSQL</productname> database server is installed
   (the current version of <productname>pg_xnode</productname> has been developed on top of
   <productname>PostgreSQL</productname> <productnumber>9.1</productnumber>).
   <orderedlist>
    <listitem>
     <para>
      Extract the archive.
     </para>
    </listitem>
   	<listitem>
   	 <para>
   	  <userinput>make</userinput>
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  <userinput>sudo make install</userinput>
   	  <footnote>
   	   <para>
   	    If <firstterm>PATH</firstterm> environment variable doesn't seem to contain
   	  	<productname>pg_xnode</productname>, specify the full path, e.g.
   	    <userinput>sudo env PG_CONFIG=/usr/local/pgsql/bin/pg_config make install</userinput>
   	   </para>
   	  </footnote>
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  Connect to your database.
   	 </para>
   	</listitem>
   	<listitem>
   	 <para>
   	  <userinput>CREATE EXTENSION xnode;</userinput>
   	  <footnote>
   	   <para>
   	    If earlier version already exists where version number &lt;=1.0, then the extension
   	    must be dropped (with <literal>CASCADE</literal> option) and re-created.
   	    If the <literal>CREATE</literal> command step is skipped in such a case instead, then
   	    data in obsolete format remain in the database and <productname>pg_node</productname>'s
   	    behaviour becomes undefined.   
   	   </para>
   	   <para>
   	   	This only applies to pre-releases. Migration functionality will be delivered
   	   	for versions &gt; 1.0;  
   	   </para>
   	  </footnote>
   	 </para>
   	</listitem>
   </orderedlist>
  </para>
 </sect1>
 
 <sect1>
  <title>Data types</title>
  <para>
   <productname>pg_xnode</productname> defines data types to store various XML-related objects
   in binary form. This helps to avoid (repeated) unnecessary parsing and serialization of
   those objects and thus provides potential for efficient data processing.
  </para>
  <sect2>
   <title><literal>xml.node</literal></title>
   <para>
    <literal>xml.node</literal> type represents a node of XML document tree.
    Following are the valid node kinds: <firstterm>document</firstterm>,
    <firstterm>document type declaration (DTD)</firstterm>, <firstterm>element</firstterm>,
    <firstterm>attribute</firstterm>, <firstterm>comment</firstterm>,
    <firstterm>character data (CDATA)</firstterm>, <firstterm>processing instruction (PI)</firstterm>
    and <firstterm>text node</firstterm>.
   </para>
   <para>
    Special node type <firstterm>document fragment</firstterm> exists to represent
    a set of nodes.
   </para>
   <para>
    Example:
    <programlisting>
CREATE TABLE nodes (
        data    xml.node
);

INSERT INTO nodes
VALUES ('&lt;element/&gt;'), ('&lt;!--comment--&gt;'), ('plain text'), ('&lt;a/&gt;&lt;b/&gt;');

SELECT *
FROM nodes;
    </programlisting>
    <screen>
          data      
----------------
 &lt;element/&gt;
 &lt;!--comment--&gt;
 plain text
 &lt;a/&gt;&lt;b/&gt;
(4 rows)
    </screen>
   </para>
  </sect2>
  
  <sect2>
   <title><literal>xml.doc</literal></title>
   <para>
    <literal>xml.doc</literal> represents well-formed XML document.
    <footnote>
     <para>
      Unlike other node kinds (comment, element, etc.) there's no polymorphism between
      <literal>xml.node</literal> and <literal>xml.doc</literal>. That is, functions do not
      consider <literal>xml.doc</literal> a special case of <literal>xml.node</literal>. However
      an implicit <literal>xml.node:xml.doc</literal> cast exists for cases where conversion to 
      a well-formed XML document does make sense.  
     </para>
    </footnote>
   </para>
   <para>
    Example:
    <programlisting>
CREATE TABLE ecosystems (
	id	int,
	data	xml.doc
);
     
INSERT INTO ecosystems VALUES (1,
	'&lt;zoo city="Wien"&gt;&lt;penguin name="Pingu"/&gt;&lt;elephant name="Sandeep"/&gt;&lt;/zoo&gt;');
	
INSERT INTO ecosystems VALUES (2,
	'&lt;africa&gt;&lt;hipo weight="2584"/&gt;&lt;elephant age="28"/&gt;&lt;/africa&gt;');

INSERT INTO ecosystems VALUES (3,
	'&lt;zoo city="Dublin"&gt;&lt;rhino/&gt;&lt;giraffe/&gt;&lt;elephant name="Yasmin"/&gt;&lt;/zoo&gt;');
    </programlisting>
   </para>
  </sect2>
  
  <sect2>
   <title><literal>xml.pathval</literal></title>
   <para>
    <literal>xml.pathval</literal> represents a result of <literal>xml.path()</literal> functions
    (see bellow). Depending on the XPath used for a search, the <literal>xml.pathval</literal> value
    contains value of one of the following types: number, string, boolean,
    <literal>xml.node</literal>.
   </para>
  </sect2>
 </sect1>

 <sect1>
  <title>Functions</title>     
  <sect2>
   <title><literal>xml.node_kind()</literal></title>
<synopsis>
xml.node_kind(xml.node node) returns text
</synopsis>
   <para>
    Returns textual expression for the kind of <literal>node</literal>, e.g. element, comment, etc.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.node_kind(data)
FROM nodes;   
    </programlisting>
    <screen>
           node_kind        
------------------------
 XML element
 XML comment
 text node
 document fragment
(4 rows)
    </screen>
   </para>
  </sect2>
  
  <sect2>
   <title><literal>xml.element()</literal></title>
<synopsis>
xml.element(text name, text[][2] attributes, xml.node nested) returns xml.node
</synopsis>
   <para>
    Returns XML element having name equal to <literal>name</literal> and attributes listed in
    <literal>attributes</literal> array: one row per attribute where the first column is attribute
    name and the second column is the attribute value. <literal>nested</literal> parameter may contain
    other node(s) to be nested in the new XML element.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.element('city', '{{"name", "Tokyo"}, {"population", 13185502}}', NULL);
	</programlisting>
	<screen>
                  element                   
--------------------------------------------
 &lt;city name="Tokyo" population="13185502"/&gt;
 (1 row)
 	</screen>
   </para>
   
   <para>
    Example:
    <programlisting>
SELECT xml.element('book', NULL, xml.element('chapter', '{{"id", 1}}', 'some text'));
	</programlisting>
	<screen> 
                      element                      
--------------------------------------------------
 &lt;book&gt;&lt;chapter id="1"&gt;some text&lt;/chapter&gt;&lt;/book&gt;
(1 row)
 	</screen>
   </para>
  </sect2>
   
  <sect2>
   <title><literal>xml.children()</literal></title>
<synopsis>
xml.children(xml.node node) returns xml.node[]
</synopsis>
   <para>
    Returns array of <literal>node</literal>&apos;s child nodes or empty array if <literal>node</literal>
    is a leaf node.
   </para>
   <para>
    Only node at the immediate lower level of the tree is considered a child.
    Recursive calls of the function on results has to be used to get nested nodes from the deeper levels
    (i.e. <firstterm>descendants</firstterm>). 
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.children(&apos;&lt;house&gt;&lt;cellar&gt;&lt;wine/&gt;&lt;/cellar&gt;&lt;floor/&gt;&lt;garret/&gt;&lt;/house&gt;&apos;);
                   children                    
-----------------------------------------------
 {&lt;cellar&gt;&lt;wine/&gt;&lt;/cellar&gt;,&lt;floor/&gt;,&lt;garret/&gt;}
(1 row)

    </programlisting>
   </para>
  </sect2>
  <sect2>
   <title><literal>xml.path()</literal> - scalar</title>
<synopsis>
xml.path(xml.path xpath, xml.doc document) returns xml.pathval
</synopsis>
   <para>
    Returns result of XPath expression (passed as <literal>xpath</literal>)
    applied to <literal>document</literal>.
    If <literal>xpath</literal> is a location path and there are multiple qualifying nodes
    in the document then the returned<function>xml.pathval</function> contains a document fragment
    containing all the qualifying nodes.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.path('//elephant', e.data)
FROM ecosystems e;
    </programlisting>
    <screen>
         elephants          
----------------------------
 &lt;elephant name="Sandeep"/&gt;
 &lt;elephant age="28"/&gt;
 &lt;elephant name="Yasmin"/&gt;
(3 rows)
    </screen>
   </para>
  </sect2>
   
  <sect2>
   <title><literal>xml.path()</literal> - vector</title>
<synopsis>
xml.path(xml.path basePath, xml.path[] columnPaths, xml.doc doc) returns xml.pathval[]
</synopsis>
   <para>
    Returns table-like output. For each occurrence of <literal>basePath</literal> in
    <literal>doc</literal> an array of <literal>xml.pathval</literal> values is returned
    where n-th element is value of relative XPath expression passed as n-th element of
    <literal>columnPaths</literal>. All values of <literal>columnPaths</literal> array
    are relative to <literal>basePath</literal>.
   </para>
   <para>
    Example:
    <programlisting>
SELECT xml.path('/zoo',
	'{"@city", "count(elephant)", "count(penguin)"}', e.data) as counts
FROM ecosystems e;
    </programlisting>
    <screen>
           counts           
----------------------------
 {Wien,1.000000,1.000000}
 {Dublin,1.000000,0.000000}
(2 rows)
    </screen>
   </para>
  </sect2>
 
  <sect2>
   <title><literal>xml.add()</literal></title>
<synopsis>
xml.add(xml.doc doc, xml.path path, xml.node newNode, xml.add_mode mode) returns xml.doc
</synopsis>
   <para>
    Adds <literal>newNode</literal> to all occurrences of <literal>path</literal> in
    <literal>doc</literal>. Depending on <literal>mode</literal> value, the new node can
    be added before (<literal>b</literal>) or after (<literal>a</literal>) the <firstterm>target node</firstterm>
    (where target node is the the node <literal>path</literal> points at).
   </para>
   <para>
    If target node kind is element and  <literal>mode</literal> is <literal>i</literal>, then
    the new node is added into that element. If that element is not empty, the new node is added
    as the last.
   </para>
   <para>
    If <literal>mode</literal> is <literal>r</literal> then the target node is replaced with
    <literal>newNode</literal>.
   </para>
   <para>
    A document is returned where all the additions have been done as required
    in the input parameters.
   </para>
   <para>
    Example:
    <programlisting>
UPDATE ecosystems e
SET data=xml.add(e.data, '/africa', '&lt;gorilla/&gt;', 'i')
where e.id=2;

SELECT data FROM ecosystems e where e.id=2;
    </programlisting>
    <screen>
                                     data                                     
------------------------------------------------------------------------------
 &lt;africa&gt;&lt;hipo weight="2584"/&gt;&lt;elephant age="28"/&gt;&lt;gorilla/&gt;&lt;/africa&gt;
(1 row)
    </screen>
   </para>
  </sect2>
 
  <sect2>
   <title><literal>xml.remove()</literal></title>
<synopsis>
xml.remove(xml.doc doc, xml.path path) returns xml.doc
</synopsis>
   <para>
    Removes all occurrences of <literal>path</literal> from <literal>docu</literal>.
   </para>
   <para>
    A document is returned where all the removals have been done as required
    in the input parameters.
   </para>
   <para>
    Example:
    <programlisting>
UPDATE ecosystems e
SET data=xml.remove(e.data, '/zoo/elephant')
WHERE xml.path('/zoo', data);

SELECT xml.path('count(/zoo/elephant)', data)
FROM ecosystems e
WHERE xml.path('/zoo', data);
    </programlisting>
    <screen>
   path   
----------
 0
 0
(2 rows)

    </screen>
   </para>
  </sect2>
 
  <sect2>
   <title><literal>xml.node_debug_print()</literal></title>
<synopsis>
xml.node_debug_print(xml.node node) returns text
</synopsis>
   <para>
    Shows tree structure of <literal>node</literal> tree. Instead of content, position
    (offset) of each node in the binary value is displayed, as well as its size. 
   </para>
  </sect2>
  
  <sect2>
   <title><literal>xml.path_debug_print()</literal></title>
<synopsis>
xml.path_debug_print(xml.path xpath) returns text
</synopsis>
   <para>
    Returns text string showing structure of XPath expression passed as <literal>xpath</literal>. 
   </para>
  </sect2>
 </sect1>
 <appendix id="release">
 <title>Release Notes</title>
  <sect1>
   <title>Release 0.6.0</title>
   <para>
    The first release to be published on www.pgxn.org
   </para>
  </sect1>

  <sect1>
   <title>Release 0.6.1</title>
   <itemizedlist>
    <listitem>
     <para>
      Added XPath core library functions <literal>true()</literal>, <literal>false()</literal>,
      <literal>last()</literal>, <literal>concat()</literal>, <literal>boolean()</literal>,
      <literal>number()</literal> and <literal>string()</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      Added DOM function <literal>xml.children()</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Added casts from <literal>xml.pathval</literal> to Postgres types.
     </para>
    </listitem>
    <listitem>
     <para>
      Fixed several bugs and eliminated some inefficiencies
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
  
  <sect1>
   <title>Release 0.7.0</title>
   <itemizedlist>
    <listitem>
     <para>
      Function <literal>xml.element()</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      XPath core library function <literal>starts-with()</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      XPath operators: <literal>|</literal>, <literal>+</literal>, <literal>-</literal>
      (both binary and unary), <literal>*</literal>, <literal>div</literal>, <literal>mod</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Bug fixes, refactoring, comments.
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
</appendix>
</article>